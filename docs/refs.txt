("foreach" "iterate a collection" (("collection handle" )("prefix" :noproc )("template" )))
("iffieldexists" "check a collection field exists" (("coll handle" )("fieldname" )("do this if true" )("do this if false" )))
("setcoll" "set a tag to alias to a collection" (("tagname" )("coll handle" )))
("setitem" "set a tag to alias to a collection item" (("tagname" )("item handle" )))
("setnode" "set a tag to alias to a collection item" (("tagname" )("node handle" )))
("collsize" "return the size of a collection" (("coll handle")))
("dumpcoll" "dump a collection as an HTML table" (("coll handle" )))
("split" "split a string by delimiter character, return a collection of strings" (("string" )("delimiter" :noproc )))
("marktree" "set fields a hierarchy collection indicating selection" (("tree handle" )("name of field" )("value of field in selected item" )))
("rendertree" "walk a tree with current walk renderer params" (("tree handle" )("prefix" :noproc )))
("treeselnode" "set the selected walk node renderer for a level" (("level" :noproc )("pre-text" :noproc )("post-text" :noproc )))
("treeunselnode" "set the unselected walk node renderer for a level:" (("level" :noproc )("pre-text" :noproc )("post-text" :noproc )))
("treetrailnode" "set the trail walk node renderer for a level" (("level" :noproc )("pre-text" :noproc )("post-text" :noproc )))
("treeprefix" "set the walk prefix for a level" (("level" :noproc )("text" :noproc )))
("treesuffix" "set the walk prefix for a level" (("level" :noproc )("text" :noproc )))
("findcollection" "find collection in tree containing specified node" (("tree" )("name of field" )("value of field in required node" )))
("findnode" "find a node given a field and string" (("tree" )("name of field" )("value of field in required node" )))
("withnode" "render a single node in a tree with a given template" (("node handle" )("prefix for field values" :noproc )("template to use" :noproc )))
("parentc" "find parent collection of tree node" (("node handle" )))
("parenti" "find index of node of parent collection of tree node" (("node handle" )))
("parent" "find parent node of a tree node" (("node handle" )))
("indexof" "find the index of a tree node" (("node handle" )))
("getfield" "get value of a field in a node" (("node handle" )("field name" )))
("iffieldset" "test if a field has been set with a value" (("node" )("field name" )("useifset" )("useifnotset" )))
("dump" "dump all templates" ())
("settrim" "set whether whitespace is trimmed from tags" (("0 or 1" :noproc )))
("trim" "trim whitespace from a string" (("string" )))
("debugloads" "set whether load debugging is on" (("0 or 1" :noproc )))
("ifnotempty" "returns argv[1] if the string argv[0] is longer than 0, else argv[2]" (("string" )("use if longer than zero length" )("use if zero length" )))
("cmpn" "binary numeric comparision" (("condition" )("val1" )("val2" )("use if true" )("use if false" )))
("streq" "case-dependent string compare" (("str1" )("str2" )("resultifsame" )("resultifdifferent" )))
("strieq" "case-independent string compare" (("str1" )("str2" )("resultifsame" )("resultifdifferent" )))
("contains" "test if str1 contains str2" (("str1" )("str2" )("resultiftrue" )("resultiffalse" )))
("switch" "switch statement - compare a string with a set of values, substituting a corresponding string if a value matches" (("0" )))
("push" "push the template registry" ())
("pop" "pop the template registry" ())
("set" "set a template value" (("name" )("val" )("p" :optional :noproc )))
("load" "load a TDL file, defining templates with a given prefix" (("prefix" )("dir with trailing /" )("filename" )))
("loadpage" "load a page definition file, using the tag prefix given to define the tags" (("page specifier" )("prefix" )))
("htmlentities" "encode html entities" (("string to encode" )))
("nl" "newline" ())
("httpgetparam" "get an HTTP GET parameter" (("parameter name" )))
("httppostparam" "get an HTTP POST parameter" (("parameter name" )))
("add" "add two numbers" (("val1" )("val2" )))
("sub" "subtract two numbers" (("val1" )("val2" )))
("mul" "mult two numbers" (("val1" )("val2" )))
("div" "divide two numbers" (("val1" )("val2" )))
("mod" "modulo two numbers" (("val1" )("val2" )))
("int" "return int value" (("string" )))
("ftime" "format the current time with strftime" (("format string" :noproc )))
("settimezone" "set the time zone" (("time zone string" )))
("iftagexists" "is tag defined" (("name" )("iftrue" )("iffalse" )))
("useifexists" "if tag is defined, use it, otherwise an alternative string" (("tagname" )("string to use if tag not defined" )))
("iftagtrue" "is tag exists and is a nonzero integer" (("name" :noproc )("useiftrue" )("useiffalse" )))
("scmstag" "" ())
("splittext" "split a string by delimiter and process each substring with different templates, concatenating the results" (("see definition" )))
("if" "if arg0 is nonzero, use arg1 else use arg2" (("integer value" )("useiftrue" )("useiffalse" )))
("and" "logical AND operation:" (("val1" )("val2" )))
("or" "logical OR operation" (("val1" )("val2" )))
("not" "NOT operation" (("value" )))
("count" "counter function" (("prefix" )("command: start,ct,alt or tog" :noproc )("options (see docs)" )))
("for" "numeric for loop" (("var" )("start" )("end" )("template" )))
("curnavnode" "get the current node in the navigation tree" ())
("navtree" "get the navigation menu tree" ())
("navlinks" "accessibility link rel tag generator" (("startkey" :optional )("nextkey" :optional )("prevkey" :optional )))
("langtree" "get the language collection pseudotree" ())
("module:ifposthandledby" "check a POST request was handled by a given module" (("module name" )("use if post handled by this module" )("use if not" )))
("module:ifgethandledby" "check a GET request was handled by a given module" (("module name" )("use if get handled by this module" )("use if not" )))
("url" "a URL to the specified page, preserving GET vars" (("spec" )("style" :optional )))
("urlnoget" "a URL to the specified page, discarding GET vars" (("spec" )("style" :optional )))
("link" "a link to the specified page" (("spec" )("linktext" )("style" :optional )))
("thispage" "the URL for the current page" ())
("spec" "the specifier for the current page" ())
("langcode" "current language code" ())
("langencoding" "current language encoding (e.g. UTF-8)" ())
("style" "the current style (or empty for none)" ())
("root" "the root URL" ())
("imgroot" "the URL for images (site/images)" ())
("templateroot" "the URL for the current template" ())
("defaultpage" "the spec of default start page" ())
("module:posthandled" "" ())
("module:gethandled" "" ())
("navlinktemplate:index" "collection item index" ())
("navlinktemplate:level" "collection item level" ())
("navlinktemplate:coll" "collection handle" ())
("navlinktemplate:parentc" "collection parent handle" ())
("navlinktemplate:parenti" "collection parent node index" ())
("navlinktemplate:handle" "collection item alias in walk" ())
("navlinktemplate:child" "collection value" ())
("navlinktemplate:spec" "collection value" ())
("navlinktemplate:url" "collection value" ())
("navlinktemplate:name" "collection value" ())
("navlinktemplate:type" "collection value" ())
("navlinktemplate:key" "collection value" ())
("navlinktemplate:accesskeyattr" "collection value" ())

